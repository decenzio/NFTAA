
//! Autogenerated weights for `pallet_nftaa`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-01-15, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Branislavs-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// ./target/release/parachain-template-node
// benchmark
// pallet
// --pallet
// pallet_nftaa
// --steps
// 50
// --repeat
// 20
// --extrinsic
// *
// --output
// templates/parachain/pallets/pallet-nftaa/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_nftaa`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_nftaa::WeightInfo for WeightInfo<T> {
	/// Storage: `PalletNFTAA::NftAccounts` (r:1 w:1)
	/// Proof: `PalletNFTAA::NftAccounts` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `PalletNFTS::Item` (r:1 w:0)
	/// Proof: `PalletNFTS::Item` (`max_values`: None, `max_size`: Some(158), added: 2633, mode: `MaxEncodedLen`)
	fn create_nftaa() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `314`
		//  Estimated: `3623`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(14_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3623))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `PalletNFTAA::NftAccounts` (r:1 w:1)
	/// Proof: `PalletNFTAA::NftAccounts` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `PalletNFTS::Item` (r:1 w:1)
	/// Proof: `PalletNFTS::Item` (`max_values`: None, `max_size`: Some(158), added: 2633, mode: `MaxEncodedLen`)
	/// Storage: `PalletNFTS::Collection` (r:1 w:0)
	/// Proof: `PalletNFTS::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `PalletNFTS::Attribute` (r:1 w:0)
	/// Proof: `PalletNFTS::Attribute` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
	/// Storage: `PalletNFTS::CollectionConfigOf` (r:1 w:0)
	/// Proof: `PalletNFTS::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `PalletNFTS::ItemConfigOf` (r:1 w:0)
	/// Proof: `PalletNFTS::ItemConfigOf` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `PalletNFTS::Account` (r:0 w:2)
	/// Proof: `PalletNFTS::Account` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `PalletNFTS::ItemPriceOf` (r:0 w:1)
	/// Proof: `PalletNFTS::ItemPriceOf` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `PalletNFTS::PendingSwapOf` (r:0 w:1)
	/// Proof: `PalletNFTS::PendingSwapOf` (`max_values`: None, `max_size`: Some(71), added: 2546, mode: `MaxEncodedLen`)
	fn transfer_nftaa() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `607`
		//  Estimated: `3719`
		// Minimum execution time: 43_000_000 picoseconds.
		Weight::from_parts(44_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3719))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `PalletNFTAA::NftAccounts` (r:1 w:0)
	/// Proof: `PalletNFTAA::NftAccounts` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `PalletNFTS::Item` (r:1 w:0)
	/// Proof: `PalletNFTS::Item` (`max_values`: None, `max_size`: Some(158), added: 2633, mode: `MaxEncodedLen`)
	/// Storage: `PalletNFTS::ItemPriceOf` (r:1 w:0)
	/// Proof: `PalletNFTS::ItemPriceOf` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	fn proxy_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `395`
		//  Estimated: `3623`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(20_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3623))
			.saturating_add(T::DbWeight::get().reads(3))
	}
}
